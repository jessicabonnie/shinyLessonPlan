<!DOCTYPE HTML>
<!-- saved from url=(0076)https://www.cdc.gov/drugoverdose/maps/rxcounty2013/index.html -->
<!DOCTYPE html PUBLIC "" ""><HTML lang="en"><HEAD><META content="IE=11.0000" 
http-equiv="X-UA-Compatible">
         
<META charset="utf-8">         
<META http-equiv="X-UA-Compatible" content="IE=edge">         
<META name="viewport" content="initial-scale=1,user-scalable=no,maximum-scale=1,width=device-width"> 
        
<META name="mobile-web-app-capable" content="yes">         
<META name="apple-mobile-web-app-capable" content="yes">         <LINK href="index_files/leaflet.css" 
rel="stylesheet">         <LINK href="index_files/qgis2web.css" rel="stylesheet" 
type="text/css">         <LINK href="index_files/MarkerCluster.css" rel="stylesheet"> 
        <LINK href="index_files/MarkerCluster.Default.css" rel="stylesheet">     
    
<STYLE>
        html, body, #map {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
        }
        </STYLE>
         <TITLE></TITLE>     
<META name="GENERATOR" content="MSHTML 11.00.10586.1106"></HEAD>     
<BODY>
<DIV id="map"></DIV>
<SCRIPT src="js/qgis2web_expressions.js"></SCRIPT>
         
<SCRIPT src="js/leaflet.js"></SCRIPT>
         
<SCRIPT src="js/multi-style-layer.js"></SCRIPT>
         
<SCRIPT src="js/leaflet-heat.js"></SCRIPT>
         
<SCRIPT src="js/leaflet-svg-shape-markers.min.js"></SCRIPT>
         
<SCRIPT src="js/leaflet.rotatedMarker.js"></SCRIPT>
         
<SCRIPT src="js/OSMBuildings-Leaflet.js"></SCRIPT>
         
<SCRIPT src="js/leaflet-hash.js"></SCRIPT>
         
<SCRIPT src="js/leaflet-tilelayer-wmts.js"></SCRIPT>
         
<SCRIPT src="js/Autolinker.min.js"></SCRIPT>
         
<SCRIPT src="js/leaflet.markercluster.js"></SCRIPT>
         
<SCRIPT src="data/Insetboxes0.js"></SCRIPT>
         
<SCRIPT src="data/States1.js"></SCRIPT>
         
<SCRIPT src="data/Missingdata2.js"></SCRIPT>
         
<SCRIPT src="data/2013Rateper100persons3.js"></SCRIPT>
         
<SCRIPT src="data/Cities4.js"></SCRIPT>
         
<SCRIPT>
        L.ImageOverlay.include({
            getBounds: function () {
                return this._bounds;
            }
        });
        var map = L.map('map', {
            zoomControl:true, maxZoom:10, minZoom:2
        })
        var hash = new L.Hash(map);
        map.attributionControl.addAttribution('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a>');
        var bounds_group = new L.featureGroup([]);
        function setBounds() {
            if (bounds_group.getLayers().length) {
                map.fitBounds(bounds_group.getBounds());
            }
            map.setMaxBounds(map.getBounds());
        }
        function geoJson2heat(geojson, weight) {
          return geojson.features.map(function(feature) {
            return [
              feature.geometry.coordinates[1],
              feature.geometry.coordinates[0],
              feature.properties[weight]
            ];
          });
        }
        function pop_Insetboxes0(feature, layer) {
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['STATE'] !== null ? Autolinker.link(String(feature.properties['STATE'])) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent);
        }

        function style_Insetboxes0_0() {
            return {
                pane: 'pane_Insetboxes0',
                opacity: 1,
                color: 'rgba(0,0,0,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 2.0, 
                fillOpacity: 1,
                fillColor: 'rgba(255,255,255,1.0)',
            }
        }
        map.createPane('pane_Insetboxes0');
        map.getPane('pane_Insetboxes0').style.zIndex = 400;
        map.getPane('pane_Insetboxes0').style['mix-blend-mode'] = 'normal';
    var layer_Insetboxes0 = new L.geoJson(json_Insetboxes0, {
        attribution: '<a href=""></a>',
        pane: 'pane_Insetboxes0',
        onEachFeature: pop_Insetboxes0,
        style: style_Insetboxes0_0,
    });
        bounds_group.addLayer(layer_Insetboxes0);
        map.addLayer(layer_Insetboxes0);
        function pop_States1(feature, layer) {
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['STATE_NAME'] !== null ? Autolinker.link(String(feature.properties['STATE_NAME'])) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent);
        }

        function style_States1_0() {
            return {
                pane: 'pane_States1',
                opacity: 1,
                color: 'rgba(0,0,0,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 6.0, 
                fillOpacity: 1,
                fillColor: 'rgba(255,255,255,1.0)',
            }
        }
        map.createPane('pane_States1');
        map.getPane('pane_States1').style.zIndex = 401;
        map.getPane('pane_States1').style['mix-blend-mode'] = 'normal';
    var layer_States1 = new L.geoJson(json_States1, {
        attribution: '<a href=""></a>',
        pane: 'pane_States1',
        onEachFeature: pop_States1,
        style: style_States1_0,
    });
        bounds_group.addLayer(layer_States1);
        map.addLayer(layer_States1);
        function pop_Missingdata2(feature, layer) {
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['County'] !== null ? Autolinker.link(String(feature.properties['County'])) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['FIPSCODE'] !== null ? Autolinker.link(String(feature.properties['FIPSCODE'])) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent);
        }

        function style_Missingdata2_0() {
            return {
                pane: 'pane_Missingdata2',
                opacity: 1,
                color: 'rgba(177,177,177,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fillOpacity: 1,
                fillColor: 'rgba(255,255,255,1.0)',
            }
        }
        map.createPane('pane_Missingdata2');
        map.getPane('pane_Missingdata2').style.zIndex = 402;
        map.getPane('pane_Missingdata2').style['mix-blend-mode'] = 'normal';
    var layer_Missingdata2 = new L.geoJson(json_Missingdata2, {
        attribution: '<a href=""></a>',
        pane: 'pane_Missingdata2',
        onEachFeature: pop_Missingdata2,
        style: style_Missingdata2_0,
    });
        bounds_group.addLayer(layer_Missingdata2);
        map.addLayer(layer_Missingdata2);
        function pop_2013Rateper100persons3(feature, layer) {
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['County'] !== null ? Autolinker.link(String(feature.properties['County'])) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['2013_Rate'] !== null ? Autolinker.link(String(feature.properties['2013_Rate'])) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent);
        }

        function style_2013Rateper100persons3_0(feature) {
            if (feature.properties['2013_Rate'] >= 0.000000 && feature.properties['2013_Rate'] <= 57.150000 ) {
                return {
                pane: 'pane_2013Rateper100persons3',
                opacity: 1,
                color: 'rgba(177,177,177,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fillOpacity: 1,
                fillColor: 'rgba(255,236,191,1.0)',
            }
            }
            if (feature.properties['2013_Rate'] >= 57.150000 && feature.properties['2013_Rate'] <= 82.300000 ) {
                return {
                pane: 'pane_2013Rateper100persons3',
                opacity: 1,
                color: 'rgba(177,177,177,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fillOpacity: 1,
                fillColor: 'rgba(250,141,105,1.0)',
            }
            }
            if (feature.properties['2013_Rate'] >= 82.300000 && feature.properties['2013_Rate'] <= 112.500000 ) {
                return {
                pane: 'pane_2013Rateper100persons3',
                opacity: 1,
                color: 'rgba(177,177,177,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fillOpacity: 1,
                fillColor: 'rgba(227,48,39,1.0)',
            }
            }
            if (feature.properties['2013_Rate'] >= 112.500000 && feature.properties['2013_Rate'] <= 800.000000 ) {
                return {
                pane: 'pane_2013Rateper100persons3',
                opacity: 1,
                color: 'rgba(177,177,177,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fillOpacity: 1,
                fillColor: 'rgba(102,1,14,1.0)',
            }
            }
        }
        map.createPane('pane_2013Rateper100persons3');
        map.getPane('pane_2013Rateper100persons3').style.zIndex = 403;
        map.getPane('pane_2013Rateper100persons3').style['mix-blend-mode'] = 'normal';
    var layer_2013Rateper100persons3 = new L.geoJson(json_2013Rateper100persons3, {
        attribution: '<a href=""></a>',
        pane: 'pane_2013Rateper100persons3',
        onEachFeature: pop_2013Rateper100persons3,
        style: style_2013Rateper100persons3_0,
    });
        bounds_group.addLayer(layer_2013Rateper100persons3);
        map.addLayer(layer_2013Rateper100persons3);
        function pop_Cities4(feature, layer) {
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['NAME'] !== null ? Autolinker.link(String(feature.properties['NAME'])) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent);
        }

        function style_Cities4_0() {
            return {
                pane: 'pane_Cities4',
                radius: 3.2,
                opacity: 1,
                color: 'rgba(0,0,0,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fillOpacity: 1,
                fillColor: 'rgba(38,11,28,1.0)',
            }
        }
        map.createPane('pane_Cities4');
        map.getPane('pane_Cities4').style.zIndex = 404;
        map.getPane('pane_Cities4').style['mix-blend-mode'] = 'normal';
        var layer_Cities4 = new L.geoJson(json_Cities4, {
            attribution: '<a href=""></a>',
            pane: 'pane_Cities4',
            onEachFeature: pop_Cities4,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_Cities4_0(feature))
            },
        });
        bounds_group.addLayer(layer_Cities4);
        map.addLayer(layer_Cities4);
        var baseMaps = {};
        L.control.layers(baseMaps,{'<img src="legend/Cities4.png" /> Cities': layer_Cities4,'2013 Rate per 100 persons<br /><table><tr><td style="text-align: center;"><img src="legend/2013Rateper100persons3_5720.png" /></td><td>< 57.2</td></tr><tr><td style="text-align: center;"><img src="legend/2013Rateper100persons3_5728231.png" /></td><td> 57.2 - 82.3 </td></tr><tr><td style="text-align: center;"><img src="legend/2013Rateper100persons3_82411252.png" /></td><td> 82.4 - 112.5 </td></tr><tr><td style="text-align: center;"><img src="legend/2013Rateper100persons3_11253.png" /></td><td>> 112.5</td></tr></table>': layer_2013Rateper100persons3,'<img src="legend/Missingdata2.png" /> Missing data': layer_Missingdata2,'<img src="legend/States1.png" /> States': layer_States1,'<img src="legend/Insetboxes0.png" /> Inset boxes': layer_Insetboxes0,},{collapsed:false}).addTo(map);
        setBounds();
        </SCRIPT>
     </BODY></HTML>
